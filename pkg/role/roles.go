package role

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"identity/actions"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Role)
// DB Table: Plural (roles)
// Resource: Plural (Roles)
// Path: Plural (/roles)
// View Template Folder: Plural (/templates/roles/)

// RolesResource is the resource for the Role model
type RolesResource struct {
	buffalo.Resource
}

// List gets all Roles. This function is mapped to the path
// GET /roles
func (v RolesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	roles := &Roles{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Roles from the DB
	if err := q.All(roles); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, actions.R.JSON(roles))
	}).Respond(c)
}

// Show gets the data for one Role. This function is mapped to
// the path GET /roles/{role_id}
func (v RolesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Role
	role := &Role{}

	// To find the Role the parameter role_id is used.
	if err := tx.Find(role, c.Param("role_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, actions.R.JSON(role))
	}).Respond(c)
}

// Create adds a Role to the DB. This function is mapped to the
// path POST /roles
func (v RolesResource) Create(c buffalo.Context) error {
	// Allocate an empty Role
	role := &Role{}

	// Bind role to the html form elements
	if err := c.Bind(role); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(role)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, actions.R.JSON(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, actions.R.JSON(role))
	}).Respond(c)
}

// Update changes a Role in the DB. This function is mapped to
// the path PUT /roles/{role_id}
func (v RolesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Role
	role := &Role{}

	if err := tx.Find(role, c.Param("role_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Role to the html form elements
	if err := c.Bind(role); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(role)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, actions.R.JSON(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, actions.R.JSON(role))
	}).Respond(c)
}

// Destroy deletes a Role from the DB. This function is mapped
// to the path DELETE /roles/{role_id}
func (v RolesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Role
	role := &Role{}

	// To find the Role the parameter role_id is used.
	if err := tx.Find(role, c.Param("role_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(role); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, actions.R.JSON(role))
	}).Respond(c)
}
